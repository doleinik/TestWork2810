@use "sass:math";

@import '../const';

// Crop top line height space, 
// using: @include lhCrop(1.2); //line-height: 1.2
@mixin lhCrop($line-height) {
  &::before {
    content: '';
    display: block;
    height: 0;
    width: 0;
    margin-top: calc((1 - #{$line-height}) * 0.5em);
  }
}


@function z($layer) {
  @return map-get($z-indexes, $layer);
}

@mixin css-triangle($color, $direction, $size: 6px) {
  // base styles
  border: $size solid transparent;
  @if $direction == 'down' {
    border-top-color: $color;
    bottom: -$size * 2;
    left: 50%;
    transform: translateX(-50%);
  } @else if $direction == 'up' {
    border-bottom-color: $color;
    top: -$size * 2;
    left: 50%;
    transform: translateX(-50%);
  } @else if $direction == 'right' {
    border-left-color: $color;
    right: -$size * 2;
    top: 50%;
    transform: translateY(-50%);
  } @else if $direction == 'left' {
    border-right-color: $color;
    left: -$size * 2;
    top: 50%;
    transform: translateY(-50%);
  }
}

@mixin stickyFooter() {
  .main-wrapper {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  .main-content {
    flex-grow: 1;
  }
}

@mixin br($brp) {
  br {
    display: none;

    @include breakpoint($brp) {
      display: inline;
    }
  }
}

@mixin fit-image($padding: 69%) {
  display: block;
  padding-top: $padding;
  position: relative;
  overflow: hidden;
  height: 0;

  img {
    display: block;
    @include centerXY();
    max-width: none;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

@mixin fluid-width-item($widthPercentage, $gutter, $verticalGutter: 0) {
  $itemPerRow: math.div(100%, $widthPercentage);
  $widthLesser: $gutter * math.div($itemPerRow - 1, $itemPerRow);
  width: calc(#{$widthPercentage} - #{$widthLesser});

  @if ($verticalGutter) {
    margin-bottom: #{$verticalGutter};
  }
}

//Iframe с сохранение пропорций 16:9
@mixin responsive-iframe() {
  position: relative;
  padding-top: 56.25%;
  height: 0;
  background-color: #000000;

  iframe {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    border: none;
  }
}

//Когда контент всегда прилягает к краю контейнера
@mixin center-container($gutter: 30px,  $brp: $design-width) {
  max-width: $brp;
  width: 100%;
  margin-left: auto;
  margin-right: auto;

  @if ($gutter != 0) {
    padding-left: $gutter * 0.5;
    padding-right: $gutter * 0.5;

    //Добавляем размер падинга между колонками + скроллбар
    @include breakpoint($brp + ($gutter) + 16px) {
      padding-left: 0;
      padding-right: 0;
    }
  }
}

@mixin oneLineText() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

//Миксины для выравнивания
@mixin fill() {
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  right: 0;
}

@mixin centerXY() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin centerX() {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

@mixin centerY() {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

//Данный миксин нужно вызывать для блока с 3 элементами span внутри
@mixin mobileMenu($width:35px, $height:25px, $bg:#fff) {
  cursor: pointer;
  width: $width;
  height: $height;

  span {
    position: relative;
    width: 100%;
    height: 2px;
    background: $bg;
    display: flex;
    flex-direction: column;
    justify-content: center;
    transition: all $transition-style-medium;

    &:not(:first-child) {
      margin-top: 10px;
    }
  }

  //При открытом меню
  &.js-active {
    span {
      background: #fff;

      &:nth-child(2) {
        background: transparent;
      }

      &:nth-child(1) {
        transform: rotate(45deg) translate(8px, 9px);
      }

      &:nth-child(3) {
        transform: rotate(-45deg) translate(8px, -9px);
      }
    }
  }
}

@mixin burger($line-height, $line-width, $line-space, $bg) {

  .burger__inner {
    position: relative;
    width: $line-width;
    border: none;
    background: none;
    outline: none;
    height: ($line-height * 3) + ($line-space * 2);
    transition-duration: 1s;
  }

  .burger__line {
    height: $line-height;
    width: $line-width;
    left: 0;
    top: $line-space + $line-height;
    background-color: $bg;
    border-radius: 2px;
    position: absolute;
    transition-duration: 0.5s;

    &:before {
      content: "";
      position: absolute;
      top: -($line-height + $line-space);
      left: 0;
      width: $line-width;
      height: $line-height;
      background-color: $bg;
      border-radius: 2px;
      transition-duration: 0.5s;

    }

    &:after {
      content: "";
      position: absolute;
      top: $line-height + $line-space;
      left: 0;
      width: $line-width;
      height: $line-height;
      background-color: $bg;
      border-radius: 2px;
      transition-duration: 0.5s;

    }
  }

  .burger--open .burger__line {
    background: transparent;
  }
  .burger--open .burger__line:before {
    transition: transform 0.5s;
    transform: rotateZ(45deg) translate(5px, 5px);
  }

  .burger--open .burger__line:after {
    transition: transform 0.5s;
    transform: rotateZ(-405deg) translate(5px, -5px);
  }

}

@mixin preloader {
  position: fixed;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
  max-width: 100vw;
  max-height: 100vh;
  background: #f5f5f5;
  z-index: 100500;
  pointer-events: none;


  &.hidden,
  &.hidden .preloader__inner {
    animation: fadeOut;
    animation-duration: .5s;
    animation-fill-mode: forwards;
    animation-timing-function: linear;
  }

  .preloader__inner {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }

  @keyframes fadeOut {
    0% {
      opacity: 1;
      visibility: visible;
    }
    99% {
      opacity: 0;
      visibility: visible;
    }
    100% {
      opacity: 0;
      visibility: hidden;
    }
  }

}


// $min - минимальный размер св-ва
// $max - максимальный размер св-ва
// $brp1 - начальный брейкпоинт
// $brp2 - конечный брейкпоинт
// $property - свойство
@mixin fluidSize($min, $max, $brp1, $brp2, $property) {
  #{$property}: $min;

  @include breakpoint($brp1) {
    $k: math.div($max - $min, $brp2 - $brp1);
    $b: $min - ($k * $brp1);
    $temp: $k * 100vw;
    #{$property}: calc(#{$temp} + #{$b});
  }

  @include breakpoint($brp2) {
    #{$property}: $max;
  }
}

//Увеличиваем площадь за счет пустого прозрачного элемента
@mixin blankElement($width:30px, $height:30px) {
  &:after {
    content: '';
    @include centerXY();
    width: $width;
    height: $height;
  }
}

//Кастомный скроллбар
@mixin customScrollbar($width:10px, $bg:#fff, $color:#bdbdbd) {
  &::-webkit-scrollbar {
    width: $width;
  }

  &::-webkit-scrollbar-track {
    background: $bg;
  }

  &::-webkit-scrollbar-thumb {
    background: $color;
  }
}


